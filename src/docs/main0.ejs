<!DOCTYPE html>
<html>

<head>
  <meta charset="utf-8">
  <title>koa-project docs</title>
  <link href="//cdn.bootcss.com/codemirror/5.30.0/codemirror.min.css" rel="stylesheet">
  <style media="screen">
    * {
      box-sizing: content-box;
    }
    body{
      background-color: #eee;
    }
    h2 {
      text-align: center;
    }

    ul {
      color: #333;
      align-items: center;
      justify-content: center;
    }

    li {
      list-style-type: none;
      margin: 10px 10%;
    }

    .handler {
      display: flex;
      position: relative;
      align-items: center;
      border-bottom: 1px solid #aaa;
      cursor: pointer;
      justify-content: space-between;
      align-items: center;
      padding: 10px;
      border-radius: 5px 5px 0 0;
    }
    .urlBody{
        display: flex;
        background: white;
        border: 1px solid #ddd;
        overflow: hidden;
        transition: all .3s;
    }
    .close .urlBody{
        display: none;
        /*height: 0px;*/
    }
    /*.open .urlBody {
        display: block;
        height: 400px;
    }*/
    .open .handler {
      background: rgba(0, 0, 0, 0.8);
      color: white;
    }
    .btn {
      position: absolute;
      right: 0;
      bottom: 1px;
      color: white;
      padding: 5px 15px;
      border-radius: 5px 5px 0 0;
      margin-bottom: -1px;
      cursor: pointer;
    }

    .post {
      background: #1EA18D;
    }

    .delete {
      background: #d14956;
    }

    .put {
      background: #87538f;
    }

    .get {
      background: #0B88B9;
    }
    .req{
      padding: 0 10px;
      width: 50%;
      border-right: 1px solid #ddd;
    }
    .res{
      background: #f3f4f5;
      padding: 0 10px;
      width: 50%;
    }
    .body{
      border:1px solid #ccc;
      margin:5px 0;
      padding:5px;
      min-height: 200px;
    }
    .title{
      font-family: "Lato, Helvetica Neue, Helvetica, Arial, sans-serif";
      margin: 10px 0;
      color: #4c5272;
      font-size: 16px;
      font-weight: 900;
      letter-spacing: 0.1em;
    }
    .header{
      color: #000;
      font-size: 14px;
      font-weight: 700;
    }
    .input{
      max-width: 50%;
      height: 36px;
      padding: 0 5px;
      border: 1px solid #d6d7d9;
      border-radius: 3px;
      background-color: #fff;
      color: #333;
      font-size: 16px;
    }
    .add{
      background: #9ea0ad;
      color: white;
      font-weight: bold;
    }
  </style>
  <script src="//cdn.bootcss.com/codemirror/5.30.0/codemirror.min.js"></script>
  <script src="//cdn.bootcss.com/codemirror/5.30.0/addon/edit/matchbrackets.min.js"></script>
  <script src="//cdn.bootcss.com/codemirror/5.30.0/mode/javascript/javascript.min.js"></script>
  <script src="//cdn.bootcss.com/codemirror/5.30.0/addon/comment/comment.min.js"></script>
  <script src="//cdn.bootcss.com/codemirror/5.30.0/addon/comment/continuecomment.min.js"></script>
  <script src="//cdn.bootcss.com/codemirror/5.30.0/addon/lint/lint.min.js"></script>
  <script src="//cdn.bootcss.com/codemirror/5.30.0/addon/lint/json-lint.min.js"></script>
</head>

<body>
  <div>
    <div>
      <%= str %>
    </div>
    <ul id="ul" data-handlers=<%= JSON.stringify(handlers) %>>
      <%
        for(var i= 0; i < handlers.length; i++) {
        %>
        <li class="close">
          <div class="handler" onclick="openbody(this,<%= JSON.stringify(handlers[i]) %>)">
            <div><%= handlers[i].uri %></div>
            <button class="<%= handlers[i].verb %> btn"><%= handlers[i].verb %></button>
          </div>
          <div class="urlBody">
            <div class="req">
              <div class="title">description:</div>
              <div>
                <%= handlers[i].description %>
              </div>
              <div class="title">
                <span>HEADERS:</span>
                <button class="add">Add</button>
              </div>
              <div>
                <div class="header">
                  <span>Authorization:</span>
                  <input class="input"/>
                </div>
              </div>
              <div>
                <span class="header">body:</span>
                <div class="body">
                  <textarea id="req<%= handlers[i].uri.replace(/\//g,"") %>" data-handler="<%= JSON.stringify(handlers[i]) %>" class="textarea"></textarea>
                </div>
              </div>
            </div>
            <div class="res">
              <span class="header">response:</span>
              <div class="body">

              </div>
            </div>
          </div>
        </li>
        <% } %>
    </ul>
  </div>
</body>

<script type="text/javascript">
function openbody(e,handler){
  var methods = document.getElementsByTagName("li");
  var action = e.parentElement.className == "open" ? "close" : "open";
  for (var i = 0; i < methods.length; i++) {
    if (methods[i] != e.parentElement) {
      methods[i].className = "close";
    } else {
      methods[i].className = action;
    }
  }
};

  var textareas = document.getElementsByClassName("textarea");
  for (var i = 0; i < textareas.length; i++) {
    var editorReq = CodeMirror.fromTextArea(textareas[i], {
      matchBrackets: true,
      autoCloseBrackets: true,
      mode: "application/ld+json",
      lineWrapping: true
    });
    if(i == 0) {
console.log(textareas[i].id);
    try {
      var handler = textareas[i].getAttribute("data-handler");
      handler = JSON.parse(handler);
      window[textareas[i].id] = editorReq;
      window[textareas[i].id].setValue(handler.body && JSON.stringify(handler.body.example || {}));
      var totalLines = window[textareas[i].id].lineCount();
      window[textareas[i].id].autoFormatRange({line:0, ch:0}, {line:totalLines});

    } catch (e) {

    } finally {

    }

    }
  }
</script>
<script type="text/javascript">
(function() {

  CodeMirror.extendMode("css", {
    commentStart: "/*",
    commentEnd: "*/",
    newlineAfterToken: function(type, content) {
      return /^[;{}]$/.test(content);
    }
  });

  CodeMirror.extendMode("javascript", {
    commentStart: "/*",
    commentEnd: "*/",
    // FIXME semicolons inside of for
    newlineAfterToken: function(type, content, textAfter, state) {
      if (this.jsonMode) {
        return /^[\[,{]$/.test(content) || /^}/.test(textAfter);
      } else {
        if (content == ";" && state.lexical && state.lexical.type == ")") return false;
        return /^[;{}]$/.test(content) && !/^;/.test(textAfter);
      }
    }
  });

  CodeMirror.extendMode("xml", {
    commentStart: "<!--",
    commentEnd: "-->",
    newlineAfterToken: function(type, content, textAfter) {
      return type == "tag" && />$/.test(content) || /^</.test(textAfter);
    }
  });

  // Comment/uncomment the specified range
  CodeMirror.defineExtension("commentRange", function (isComment, from, to) {
    var cm = this, curMode = CodeMirror.innerMode(cm.getMode(), cm.getTokenAt(from).state).mode;
    cm.operation(function() {
      if (isComment) { // Comment range
        cm.replaceRange(curMode.commentEnd, to);
        cm.replaceRange(curMode.commentStart, from);
        if (from.line == to.line && from.ch == to.ch) // An empty comment inserted - put cursor inside
          cm.setCursor(from.line, from.ch + curMode.commentStart.length);
      } else { // Uncomment range
        var selText = cm.getRange(from, to);
        var startIndex = selText.indexOf(curMode.commentStart);
        var endIndex = selText.lastIndexOf(curMode.commentEnd);
        if (startIndex > -1 && endIndex > -1 && endIndex > startIndex) {
          // Take string till comment start
          selText = selText.substr(0, startIndex)
          // From comment start till comment end
            + selText.substring(startIndex + curMode.commentStart.length, endIndex)
          // From comment end till string end
            + selText.substr(endIndex + curMode.commentEnd.length);
        }
        cm.replaceRange(selText, from, to);
      }
    });
  });

  // Applies automatic mode-aware indentation to the specified range
  CodeMirror.defineExtension("autoIndentRange", function (from, to) {
    var cmInstance = this;
    this.operation(function () {
      for (var i = from.line; i <= to.line; i++) {
        cmInstance.indentLine(i, "smart");
      }
    });
  });

  // Applies automatic formatting to the specified range
  CodeMirror.defineExtension("autoFormatRange", function (from, to) {
    var cm = this;
    var outer = cm.getMode(), text = cm.getRange(from, to).split("\n");
    var state = CodeMirror.copyState(outer, cm.getTokenAt(from).state);
    var tabSize = cm.getOption("tabSize");

    var out = "", lines = 0, atSol = from.ch == 0;
    function newline() {
      out += "\n";
      atSol = true;
      ++lines;
    }

    for (var i = 0; i < text.length; ++i) {
      var stream = new CodeMirror.StringStream(text[i], tabSize);
      while (!stream.eol()) {
        var inner = CodeMirror.innerMode(outer, state);
        var style = outer.token(stream, state), cur = stream.current();
        stream.start = stream.pos;
        if (!atSol || /\S/.test(cur)) {
          out += cur;
          atSol = false;
        }
        if (!atSol && inner.mode.newlineAfterToken &&
            inner.mode.newlineAfterToken(style, cur, stream.string.slice(stream.pos) || text[i+1] || "", inner.state))
          newline();
      }
      if (!stream.pos && outer.blankLine) outer.blankLine(state);
      if (!atSol) newline();
    }

    cm.operation(function () {
      cm.replaceRange(out, from, to);
      for (var cur = from.line + 1, end = from.line + lines; cur <= end; ++cur)
        cm.indentLine(cur, "smart");
      cm.setSelection(from, cm.getCursor(false));
    });
  });
})();
</script>
</html>
